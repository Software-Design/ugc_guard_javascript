/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import MailTemplate from '../model/MailTemplate';
import MailTemplateType from '../model/MailTemplateType';
import MailTemplatesWithDefaults from '../model/MailTemplatesWithDefaults';
import PaginatedResultMailTemplate from '../model/PaginatedResultMailTemplate';

/**
* MailTemplates service.
* @module api/MailTemplatesApi
* @version 1.0.0
*/
export default class MailTemplatesApi {

    /**
    * Constructs a new MailTemplatesApi. 
    * @alias module:api/MailTemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMailTemplate operation.
     * @callback module:api/MailTemplatesApi~createMailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Mail Template
     * Create a new mail template.
     * @param {module:model/MailTemplate} mailTemplate 
     * @param {module:api/MailTemplatesApi~createMailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailTemplate}
     */
    createMailTemplate(mailTemplate, callback) {
      let postBody = mailTemplate;
      // verify the required parameter 'mailTemplate' is set
      if (mailTemplate === undefined || mailTemplate === null) {
        throw new Error("Missing the required parameter 'mailTemplate' when calling createMailTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MailTemplate;
      return this.apiClient.callApi(
        '/mail_templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMailTemplate operation.
     * @callback module:api/MailTemplatesApi~deleteMailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Mail Template
     * Delete a mail template by its ID.
     * @param {String} templateId 
     * @param {module:api/MailTemplatesApi~deleteMailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    deleteMailTemplate(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling deleteMailTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/mail_templates/{template_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMailTemplatesForModuleWithDefaults operation.
     * @callback module:api/MailTemplatesApi~getAllMailTemplatesForModuleWithDefaultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailTemplatesWithDefaults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Mail Templates For Module And All Defaults
     * Get all mail templates for a specific module, including default templates.
     * @param {String} moduleId 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {module:api/MailTemplatesApi~getAllMailTemplatesForModuleWithDefaultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailTemplatesWithDefaults}
     */
    getAllMailTemplatesForModuleWithDefaults(moduleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getAllMailTemplatesForModuleWithDefaults");
      }

      let pathParams = {
        'module_id': moduleId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MailTemplatesWithDefaults;
      return this.apiClient.callApi(
        '/mail_templates/modules/{module_id}/with_defaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMailTemplateById operation.
     * @callback module:api/MailTemplatesApi~getMailTemplateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Mail Template By Id
     * Get a mail template by its ID.
     * @param {String} templateId 
     * @param {module:api/MailTemplatesApi~getMailTemplateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailTemplate}
     */
    getMailTemplateById(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getMailTemplateById");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MailTemplate;
      return this.apiClient.callApi(
        '/mail_templates/{template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMailTemplateByType operation.
     * @callback module:api/MailTemplatesApi~getMailTemplateByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Mail Template By Type
     * Get a mail template by its type.
     * @param {module:model/MailTemplateType} templateType 
     * @param {String} moduleId 
     * @param {module:api/MailTemplatesApi~getMailTemplateByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailTemplate}
     */
    getMailTemplateByType(templateType, moduleId, callback) {
      let postBody = null;
      // verify the required parameter 'templateType' is set
      if (templateType === undefined || templateType === null) {
        throw new Error("Missing the required parameter 'templateType' when calling getMailTemplateByType");
      }
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getMailTemplateByType");
      }

      let pathParams = {
        'template_type': templateType
      };
      let queryParams = {
        'module_id': moduleId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MailTemplate;
      return this.apiClient.callApi(
        '/mail_templates/type/{template_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMailTemplatesForModule operation.
     * @callback module:api/MailTemplatesApi~getMailTemplatesForModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResultMailTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Mail Templates For Module
     * Get all mail templates for a specific module.
     * @param {String} moduleId 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {module:api/MailTemplatesApi~getMailTemplatesForModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResultMailTemplate}
     */
    getMailTemplatesForModule(moduleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getMailTemplatesForModule");
      }

      let pathParams = {
        'module_id': moduleId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResultMailTemplate;
      return this.apiClient.callApi(
        '/mail_templates/modules/{module_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMailTemplate operation.
     * @callback module:api/MailTemplatesApi~updateMailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Mail Template
     * Update an existing mail template.
     * @param {String} templateId 
     * @param {module:model/MailTemplate} mailTemplate 
     * @param {module:api/MailTemplatesApi~updateMailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailTemplate}
     */
    updateMailTemplate(templateId, mailTemplate, callback) {
      let postBody = mailTemplate;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling updateMailTemplate");
      }
      // verify the required parameter 'mailTemplate' is set
      if (mailTemplate === undefined || mailTemplate === null) {
        throw new Error("Missing the required parameter 'mailTemplate' when calling updateMailTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MailTemplate;
      return this.apiClient.callApi(
        '/mail_templates/{template_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
