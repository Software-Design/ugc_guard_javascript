/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnonymousPerson from '../model/AnonymousPerson';
import HTTPValidationError from '../model/HTTPValidationError';
import PersonDB from '../model/PersonDB';

/**
* Persons service.
* @module api/PersonsApi
* @version 1.0.0
*/
export default class PersonsApi {

    /**
    * Constructs a new PersonsApi. 
    * @alias module:api/PersonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPerson operation.
     * @callback module:api/PersonsApi~createPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnonymousPerson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Person
     * Create a new person.
     * @param {module:model/PersonDB} personDB 
     * @param {Object} opts Optional parameters
     * @param {String} [secret] 
     * @param {module:api/PersonsApi~createPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnonymousPerson}
     */
    createPerson(personDB, opts, callback) {
      opts = opts || {};
      let postBody = personDB;
      // verify the required parameter 'personDB' is set
      if (personDB === undefined || personDB === null) {
        throw new Error("Missing the required parameter 'personDB' when calling createPerson");
      }

      let pathParams = {
      };
      let queryParams = {
        'secret': opts['secret']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnonymousPerson;
      return this.apiClient.callApi(
        '/persons/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePerson operation.
     * @callback module:api/PersonsApi~deletePersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonDB} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Person
     * Delete a person by its ID.
     * @param {String} personId 
     * @param {module:api/PersonsApi~deletePersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonDB}
     */
    deletePerson(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling deletePerson");
      }

      let pathParams = {
        'person_id': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonDB;
      return this.apiClient.callApi(
        '/persons/{person_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonById operation.
     * @callback module:api/PersonsApi~getPersonByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonDB} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Person By Id
     * Get a person by its ID.
     * @param {String} personId 
     * @param {module:api/PersonsApi~getPersonByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonDB}
     */
    getPersonById(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getPersonById");
      }

      let pathParams = {
        'person_id': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonDB;
      return this.apiClient.callApi(
        '/persons/{person_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonByUpiId operation.
     * @callback module:api/PersonsApi~getPersonByUpiIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnonymousPerson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Person By Upi Id
     * Get a person by its Unique Partner ID
     * @param {String} upiId 
     * @param {String} moduleId 
     * @param {Object} opts Optional parameters
     * @param {String} [secret] 
     * @param {module:api/PersonsApi~getPersonByUpiIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnonymousPerson}
     */
    getPersonByUpiId(upiId, moduleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'upiId' is set
      if (upiId === undefined || upiId === null) {
        throw new Error("Missing the required parameter 'upiId' when calling getPersonByUpiId");
      }
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getPersonByUpiId");
      }

      let pathParams = {
        'upi_id': upiId
      };
      let queryParams = {
        'module_id': moduleId,
        'secret': opts['secret']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnonymousPerson;
      return this.apiClient.callApi(
        '/persons/by_upid/{upi_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePerson operation.
     * @callback module:api/PersonsApi~updatePersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonDB} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Person
     * Update a person.
     * @param {module:model/PersonDB} personDB 
     * @param {module:api/PersonsApi~updatePersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonDB}
     */
    updatePerson(personDB, callback) {
      let postBody = personDB;
      // verify the required parameter 'personDB' is set
      if (personDB === undefined || personDB === null) {
        throw new Error("Missing the required parameter 'personDB' when calling updatePerson");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonDB;
      return this.apiClient.callApi(
        '/persons/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
