/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import PaginatedResultType from '../model/PaginatedResultType';
import Type from '../model/Type';

/**
* Types service.
* @module api/TypesApi
* @version 1.0.0
*/
export default class TypesApi {

    /**
    * Constructs a new TypesApi. 
    * @alias module:api/TypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createType operation.
     * @callback module:api/TypesApi~createTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Type} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Type
     * Create a new type.
     * @param {module:model/Type} type 
     * @param {module:api/TypesApi~createTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Type}
     */
    createType(type, callback) {
      let postBody = type;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Type;
      return this.apiClient.callApi(
        '/types/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteType operation.
     * @callback module:api/TypesApi~deleteTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Type} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Type
     * Delete a type by its ID.
     * @param {String} typeId 
     * @param {module:api/TypesApi~deleteTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Type}
     */
    deleteType(typeId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling deleteType");
      }

      let pathParams = {
        'type_id': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Type;
      return this.apiClient.callApi(
        '/types/{type_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTypeActionSecret operation.
     * @callback module:api/TypesApi~getTypeActionSecretCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Type Action Secret
     * Get the action secret for a type.
     * @param {String} typeId 
     * @param {module:api/TypesApi~getTypeActionSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getTypeActionSecret(typeId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getTypeActionSecret");
      }

      let pathParams = {
        'type_id': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/types/{type_id}/action_secret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTypeById operation.
     * @callback module:api/TypesApi~getTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Type} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Type By Id
     * Get a type by its ID.
     * @param {String} typeId 
     * @param {module:api/TypesApi~getTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Type}
     */
    getTypeById(typeId, callback) {
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getTypeById");
      }

      let pathParams = {
        'type_id': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Type;
      return this.apiClient.callApi(
        '/types/{type_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTypesForModule operation.
     * @callback module:api/TypesApi~getTypesForModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResultType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Types For Module
     * Get all types for a module.
     * @param {String} moduleId 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {module:api/TypesApi~getTypesForModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResultType}
     */
    getTypesForModule(moduleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getTypesForModule");
      }

      let pathParams = {
      };
      let queryParams = {
        'module_id': moduleId,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResultType;
      return this.apiClient.callApi(
        '/types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateType operation.
     * @callback module:api/TypesApi~updateTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Type} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Type
     * Update an existing type.
     * @param {module:model/Type} type 
     * @param {module:api/TypesApi~updateTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Type}
     */
    updateType(type, callback) {
      let postBody = type;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling updateType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Type;
      return this.apiClient.callApi(
        '/types/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
