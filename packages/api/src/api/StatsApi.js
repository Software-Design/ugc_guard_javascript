/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComparedModuleState from '../model/ComparedModuleState';
import HTTPValidationError from '../model/HTTPValidationError';
import ModuleStats from '../model/ModuleStats';

/**
* Stats service.
* @module api/StatsApi
* @version 1.0.0
*/
export default class StatsApi {

    /**
    * Constructs a new StatsApi. 
    * @alias module:api/StatsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getComparedModuleStats operation.
     * @callback module:api/StatsApi~getComparedModuleStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComparedModuleState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Module Stats Compared To Prior Date
     * Get statistics for a module compared to a prior date.
     * @param {String} moduleId 
     * @param {Object} opts Optional parameters
     * @param {Date} [priorDate] 
     * @param {module:api/StatsApi~getComparedModuleStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComparedModuleState}
     */
    getComparedModuleStats(moduleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getComparedModuleStats");
      }

      let pathParams = {
        'module_id': moduleId
      };
      let queryParams = {
        'prior_date': opts['priorDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComparedModuleState;
      return this.apiClient.callApi(
        '/stats/module/{module_id}/compared', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModuleStats operation.
     * @callback module:api/StatsApi~getModuleStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModuleStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Module Stats
     * Get statistics for a module.
     * @param {String} moduleId 
     * @param {Object} opts Optional parameters
     * @param {Date} [until] 
     * @param {module:api/StatsApi~getModuleStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModuleStats}
     */
    getModuleStats(moduleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getModuleStats");
      }

      let pathParams = {
        'module_id': moduleId
      };
      let queryParams = {
        'until': opts['until']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModuleStats;
      return this.apiClient.callApi(
        '/stats/module/{module_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationStats operation.
     * @callback module:api/StatsApi~getOrganizationStatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Organization Stats
     * Get statistics for an organization.
     * @param {String} orgId 
     * @param {module:api/StatsApi~getOrganizationStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOrganizationStats(orgId, callback) {
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getOrganizationStats");
      }

      let pathParams = {
        'org_id': orgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/stats/org/{org_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
