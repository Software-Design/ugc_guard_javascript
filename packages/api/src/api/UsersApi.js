/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Channel from '../model/Channel';
import ChannelUser from '../model/ChannelUser';
import HTTPValidationError from '../model/HTTPValidationError';
import PaginatedResultChannel from '../model/PaginatedResultChannel';
import PaginatedResultUserBase from '../model/PaginatedResultUserBase';
import UserBase from '../model/UserBase';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChannel operation.
     * @callback module:api/UsersApi~createChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Channel
     * Create a new channel.
     * @param {module:model/Channel} channel 
     * @param {module:api/UsersApi~createChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    createChannel(channel, callback) {
      let postBody = channel;
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling createChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/users/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannel operation.
     * @callback module:api/UsersApi~deleteChannelCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Channel
     * Delete a channel by its ID.
     * @param {String} channelId 
     * @param {module:api/UsersApi~deleteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    deleteChannel(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/users/channels/{channel_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelById operation.
     * @callback module:api/UsersApi~getChannelByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Channel By Id
     * Get a channel by its ID.
     * @param {String} channelId 
     * @param {module:api/UsersApi~getChannelByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    getChannelById(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelById");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/users/channels/by_id/{channel_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelByIdOrName operation.
     * @callback module:api/UsersApi~getChannelByIdOrNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Channel By Id Or Name
     * Get a channel by its ID or name.
     * @param {String} idOrName 
     * @param {module:api/UsersApi~getChannelByIdOrNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    getChannelByIdOrName(idOrName, callback) {
      let postBody = null;
      // verify the required parameter 'idOrName' is set
      if (idOrName === undefined || idOrName === null) {
        throw new Error("Missing the required parameter 'idOrName' when calling getChannelByIdOrName");
      }

      let pathParams = {
        'id_or_name': idOrName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/users/channels/by_id_or_name/{id_or_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelsOfCurrentUser operation.
     * @callback module:api/UsersApi~getChannelsOfCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResultChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Channels Of Current User
     * Get the channels of the current user.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {module:api/UsersApi~getChannelsOfCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResultChannel}
     */
    getChannelsOfCurrentUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResultChannel;
      return this.apiClient.callApi(
        '/users/my/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelsOfUser operation.
     * @callback module:api/UsersApi~getChannelsOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResultChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Channels Of User
     * Get the channels of a user.
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/UsersApi~getChannelsOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResultChannel}
     */
    getChannelsOfUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getChannelsOfUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResultChannel;
      return this.apiClient.callApi(
        '/users/{user_id}/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelsOfUserUsersChannelsOfUserIdGet operation.
     * @callback module:api/UsersApi~getChannelsOfUserUsersChannelsOfUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResultChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Channels Of User
     * Get the channels of a user. :param user_id: The ID of the user :param session: Database session :param current_user: Current user :param limit: Limit for pagination :param offset: Offset for pagination :return: Dictionary containing the channels of the user
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/UsersApi~getChannelsOfUserUsersChannelsOfUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResultChannel}
     */
    getChannelsOfUserUsersChannelsOfUserIdGet(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getChannelsOfUserUsersChannelsOfUserIdGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResultChannel;
      return this.apiClient.callApi(
        '/users/channels/of/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUser operation.
     * @callback module:api/UsersApi~getCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Current User
     * Get the current user.
     * @param {module:api/UsersApi~getCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBase}
     */
    getCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserBase;
      return this.apiClient.callApi(
        '/users/myself', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UsersApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User By Id
     * Get a user by their ID.
     * @param {String} userId 
     * @param {module:api/UsersApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBase}
     */
    getUserById(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserById");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserBase;
      return this.apiClient.callApi(
        '/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersOfChannel operation.
     * @callback module:api/UsersApi~getUsersOfChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResultUserBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Users Of Channel
     * Get the users of a channel by its ID.
     * @param {String} channelId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/UsersApi~getUsersOfChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResultUserBase}
     */
    getUsersOfChannel(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getUsersOfChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResultUserBase;
      return this.apiClient.callApi(
        '/users/channels/{channel_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the joinChannel operation.
     * @callback module:api/UsersApi~joinChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join Channel
     * Join a channel by its ID.
     * @param {String} channelId 
     * @param {String} userId 
     * @param {module:api/UsersApi~joinChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelUser}
     */
    joinChannel(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling joinChannel");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling joinChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
        'user_id': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChannelUser;
      return this.apiClient.callApi(
        '/users/channels/{channel_id}/join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the joinChannelByEmail operation.
     * @callback module:api/UsersApi~joinChannelByEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join Channel By Email
     * Join a channel by its ID using email.
     * @param {String} channelId 
     * @param {String} email 
     * @param {module:api/UsersApi~joinChannelByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelUser}
     */
    joinChannelByEmail(channelId, email, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling joinChannelByEmail");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling joinChannelByEmail");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChannelUser;
      return this.apiClient.callApi(
        '/users/channels/{channel_id}/join_by_email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaveChannel operation.
     * @callback module:api/UsersApi~leaveChannelCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave Channel
     * Leave a channel by its ID.
     * @param {String} channelId 
     * @param {Object} opts Optional parameters
     * @param {String} [userId] 
     * @param {module:api/UsersApi~leaveChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    leaveChannel(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling leaveChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/users/channels/{channel_id}/leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/UsersApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Channel
     * Update an existing channel.
     * @param {String} channelId 
     * @param {module:model/Channel} channel 
     * @param {module:api/UsersApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    updateChannel(channelId, channel, callback) {
      let postBody = channel;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling updateChannel");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling updateChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/users/channels/{channel_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
