/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Files service.
* @module api/FilesApi
* @version 1.0.0
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/FilesApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete File
     * Delete a file.
     * @param {String} fileId 
     * @param {module:api/FilesApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    deleteFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/{file_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback module:api/FilesApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download File
     * Download a file.
     * @param {String} fileId 
     * @param {Object} opts Optional parameters
     * @param {String} [secret] 
     * @param {module:api/FilesApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadFile(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling downloadFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
        'secret': opts['secret']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/files/download/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileById operation.
     * @callback module:api/FilesApi~getFileByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File By Id
     * Get a file by its ID.
     * @param {String} fileId 
     * @param {Object} opts Optional parameters
     * @param {String} [secret] 
     * @param {module:api/FilesApi~getFileByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getFileById(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileById");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
        'secret': opts['secret']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFile operation.
     * @callback module:api/FilesApi~updateFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update File
     * Update a file.
     * @param {String} fileId 
     * @param {String} secret 
     * @param {File} file 
     * @param {module:api/FilesApi~updateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    updateFile(fileId, secret, file, callback) {
      let postBody = file;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling updateFile");
      }
      // verify the required parameter 'secret' is set
      if (secret === undefined || secret === null) {
        throw new Error("Missing the required parameter 'secret' when calling updateFile");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling updateFile");
      }

      let pathParams = {
        'file_id': fileId,
        'secret': secret
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/{file_id}/{secret}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/FilesApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload File
     * Upload a file.
     * @param {String} moduleId 
     * @param {File} uploadFile 
     * @param {Object} opts Optional parameters
     * @param {String} [secret] 
     * @param {module:api/FilesApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    uploadFile(moduleId, uploadFile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling uploadFile");
      }
      // verify the required parameter 'uploadFile' is set
      if (uploadFile === undefined || uploadFile === null) {
        throw new Error("Missing the required parameter 'uploadFile' when calling uploadFile");
      }

      let pathParams = {
      };
      let queryParams = {
        'module_id': moduleId,
        'secret': opts['secret']
      };
      let headerParams = {
      };
      let formParams = {
        'upload_file': uploadFile
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
