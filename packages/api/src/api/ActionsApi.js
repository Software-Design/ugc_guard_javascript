/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Action from '../model/Action';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Actions service.
* @module api/ActionsApi
* @version 1.0.0
*/
export default class ActionsApi {

    /**
    * Constructs a new ActionsApi. 
    * @alias module:api/ActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAction operation.
     * @callback module:api/ActionsApi~createActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Action
     * Create a new action.
     * @param {module:model/Action} action 
     * @param {module:api/ActionsApi~createActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    createAction(action, callback) {
      let postBody = action;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling createAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/actions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAction operation.
     * @callback module:api/ActionsApi~deleteActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Action
     * Delete an action by its ID.
     * @param {String} actionId 
     * @param {module:api/ActionsApi~deleteActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    deleteAction(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling deleteAction");
      }

      let pathParams = {
        'action_id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/actions/{action_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionById operation.
     * @callback module:api/ActionsApi~getActionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Action By Id
     * Get an action by its ID.
     * @param {String} actionId 
     * @param {module:api/ActionsApi~getActionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    getActionById(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling getActionById");
      }

      let pathParams = {
        'action_id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/actions/{action_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllActionsOfType operation.
     * @callback module:api/ActionsApi~getAllActionsOfTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Action>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Actions Of Type
     * Get all actions of a type.
     * @param {String} typeId 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {module:api/ActionsApi~getAllActionsOfTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Action>}
     */
    getAllActionsOfType(typeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getAllActionsOfType");
      }

      let pathParams = {
      };
      let queryParams = {
        'type_id': typeId,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Action];
      return this.apiClient.callApi(
        '/actions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserTypeActionById operation.
     * @callback module:api/ActionsApi~getUserTypeActionByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Action>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Type Action By Id
     * Gets all actions that belong to the user type of the module
     * @param {String} moduleId 
     * @param {module:api/ActionsApi~getUserTypeActionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Action>}
     */
    getUserTypeActionById(moduleId, callback) {
      let postBody = null;
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getUserTypeActionById");
      }

      let pathParams = {
        'module_id': moduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Action];
      return this.apiClient.callApi(
        '/actions/user_type/{module_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the performAction operation.
     * @callback module:api/ActionsApi~performActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform Action
     * Perform an action.
     * @param {String} actionId 
     * @param {String} contentId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [onUser = false)] 
     * @param {module:api/ActionsApi~performActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    performAction(actionId, contentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling performAction");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling performAction");
      }

      let pathParams = {
        'action_id': actionId
      };
      let queryParams = {
        'content_id': contentId,
        'on_user': opts['onUser']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/actions/{action_id}/perform', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAction operation.
     * @callback module:api/ActionsApi~updateActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Action
     * Update an action.
     * @param {module:model/Action} action 
     * @param {module:api/ActionsApi~updateActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    updateAction(action, callback) {
      let postBody = action;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling updateAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/actions/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
