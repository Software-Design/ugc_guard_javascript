/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MailTemplateType from './MailTemplateType';

/**
 * The MailTemplateBase model module.
 * @module model/MailTemplateBase
 * @version 1.0.0
 */
class MailTemplateBase {
    /**
     * Constructs a new <code>MailTemplateBase</code>.
     * Everything that is needed for sending a mail
     * @alias module:model/MailTemplateBase
     * @param type {module:model/MailTemplateType} 
     */
    constructor(type) { 
        
        MailTemplateBase.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>MailTemplateBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MailTemplateBase} obj Optional instance to populate.
     * @return {module:model/MailTemplateBase} The populated <code>MailTemplateBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MailTemplateBase();

            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = MailTemplateType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MailTemplateBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MailTemplateBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MailTemplateBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }

        return true;
    }


}

MailTemplateBase.RequiredProperties = ["type"];

/**
 * @member {String} subject
 */
MailTemplateBase.prototype['subject'] = undefined;

/**
 * @member {String} body
 */
MailTemplateBase.prototype['body'] = undefined;

/**
 * @member {module:model/MailTemplateType} type
 */
MailTemplateBase.prototype['type'] = undefined;






export default MailTemplateBase;

