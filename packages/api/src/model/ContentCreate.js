/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentType from './ContentType';

/**
 * The ContentCreate model module.
 * @module model/ContentCreate
 * @version 1.0.0
 */
class ContentCreate {
    /**
     * Constructs a new <code>ContentCreate</code>.
     * Model for creating content. This is used to define the fields required to create a new content.
     * @alias module:model/ContentCreate
     * @param creatorId {String} 
     */
    constructor(creatorId) { 
        
        ContentCreate.initialize(this, creatorId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, creatorId) { 
        obj['creator_id'] = creatorId;
    }

    /**
     * Constructs a <code>ContentCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentCreate} obj Optional instance to populate.
     * @return {module:model/ContentCreate} The populated <code>ContentCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentCreate();

            if (data.hasOwnProperty('body_type')) {
                obj['body_type'] = ContentType.constructFromObject(data['body_type']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('media_identifiers')) {
                obj['media_identifiers'] = ApiClient.convertToType(data['media_identifiers'], ['String']);
            }
            if (data.hasOwnProperty('extra_data')) {
                obj['extra_data'] = ApiClient.convertToType(data['extra_data'], {'String': Object});
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('unique_partner_id')) {
                obj['unique_partner_id'] = ApiClient.convertToType(data['unique_partner_id'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('creator_id')) {
                obj['creator_id'] = ApiClient.convertToType(data['creator_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContentCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['media_identifiers'])) {
            throw new Error("Expected the field `media_identifiers` to be an array in the JSON data but got " + data['media_identifiers']);
        }
        // ensure the json data is a string
        if (data['unique_partner_id'] && !(typeof data['unique_partner_id'] === 'string' || data['unique_partner_id'] instanceof String)) {
            throw new Error("Expected the field `unique_partner_id` to be a primitive type in the JSON string but got " + data['unique_partner_id']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['creator_id'] && !(typeof data['creator_id'] === 'string' || data['creator_id'] instanceof String)) {
            throw new Error("Expected the field `creator_id` to be a primitive type in the JSON string but got " + data['creator_id']);
        }

        return true;
    }


}

ContentCreate.RequiredProperties = ["creator_id"];

/**
 * @member {module:model/ContentType} body_type
 */
ContentCreate.prototype['body_type'] = undefined;

/**
 * @member {String} body
 */
ContentCreate.prototype['body'] = undefined;

/**
 * @member {Array.<String>} media_identifiers
 */
ContentCreate.prototype['media_identifiers'] = undefined;

/**
 * @member {Object.<String, Object>} extra_data
 */
ContentCreate.prototype['extra_data'] = undefined;

/**
 * @member {Date} created_at
 */
ContentCreate.prototype['created_at'] = undefined;

/**
 * @member {String} unique_partner_id
 */
ContentCreate.prototype['unique_partner_id'] = undefined;

/**
 * @member {String} ip
 */
ContentCreate.prototype['ip'] = undefined;

/**
 * @member {String} creator_id
 */
ContentCreate.prototype['creator_id'] = undefined;






export default ContentCreate;

