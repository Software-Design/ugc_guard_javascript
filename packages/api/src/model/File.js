/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The File model module.
 * @module model/File
 * @version 1.0.0
 */
class File {
    /**
     * Constructs a new <code>File</code>.
     * A file is a somewhere stored object that is related to a report or content.
     * @alias module:model/File
     * @param reportId {String} 
     * @param contentId {String} 
     * @param uploaderId {String} 
     * @param moduleId {String} 
     */
    constructor(reportId, contentId, uploaderId, moduleId) { 
        
        File.initialize(this, reportId, contentId, uploaderId, moduleId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, reportId, contentId, uploaderId, moduleId) { 
        obj['report_id'] = reportId;
        obj['content_id'] = contentId;
        obj['uploader_id'] = uploaderId;
        obj['in_s3'] = false;
        obj['module_id'] = moduleId;
    }

    /**
     * Constructs a <code>File</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/File} obj Optional instance to populate.
     * @return {module:model/File} The populated <code>File</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new File();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('report_id')) {
                obj['report_id'] = ApiClient.convertToType(data['report_id'], 'String');
            }
            if (data.hasOwnProperty('content_id')) {
                obj['content_id'] = ApiClient.convertToType(data['content_id'], 'String');
            }
            if (data.hasOwnProperty('file_path')) {
                obj['file_path'] = ApiClient.convertToType(data['file_path'], 'String');
            }
            if (data.hasOwnProperty('file_type')) {
                obj['file_type'] = ApiClient.convertToType(data['file_type'], 'String');
            }
            if (data.hasOwnProperty('file_size')) {
                obj['file_size'] = ApiClient.convertToType(data['file_size'], 'Number');
            }
            if (data.hasOwnProperty('blur_hash')) {
                obj['blur_hash'] = ApiClient.convertToType(data['blur_hash'], 'String');
            }
            if (data.hasOwnProperty('uploader_id')) {
                obj['uploader_id'] = ApiClient.convertToType(data['uploader_id'], 'String');
            }
            if (data.hasOwnProperty('in_s3')) {
                obj['in_s3'] = ApiClient.convertToType(data['in_s3'], 'Boolean');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('uploaded_at')) {
                obj['uploaded_at'] = ApiClient.convertToType(data['uploaded_at'], 'Date');
            }
            if (data.hasOwnProperty('removed_at')) {
                obj['removed_at'] = ApiClient.convertToType(data['removed_at'], 'Date');
            }
            if (data.hasOwnProperty('module_id')) {
                obj['module_id'] = ApiClient.convertToType(data['module_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>File</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>File</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of File.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['report_id'] && !(typeof data['report_id'] === 'string' || data['report_id'] instanceof String)) {
            throw new Error("Expected the field `report_id` to be a primitive type in the JSON string but got " + data['report_id']);
        }
        // ensure the json data is a string
        if (data['content_id'] && !(typeof data['content_id'] === 'string' || data['content_id'] instanceof String)) {
            throw new Error("Expected the field `content_id` to be a primitive type in the JSON string but got " + data['content_id']);
        }
        // ensure the json data is a string
        if (data['file_path'] && !(typeof data['file_path'] === 'string' || data['file_path'] instanceof String)) {
            throw new Error("Expected the field `file_path` to be a primitive type in the JSON string but got " + data['file_path']);
        }
        // ensure the json data is a string
        if (data['file_type'] && !(typeof data['file_type'] === 'string' || data['file_type'] instanceof String)) {
            throw new Error("Expected the field `file_type` to be a primitive type in the JSON string but got " + data['file_type']);
        }
        // ensure the json data is a string
        if (data['blur_hash'] && !(typeof data['blur_hash'] === 'string' || data['blur_hash'] instanceof String)) {
            throw new Error("Expected the field `blur_hash` to be a primitive type in the JSON string but got " + data['blur_hash']);
        }
        // ensure the json data is a string
        if (data['uploader_id'] && !(typeof data['uploader_id'] === 'string' || data['uploader_id'] instanceof String)) {
            throw new Error("Expected the field `uploader_id` to be a primitive type in the JSON string but got " + data['uploader_id']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['module_id'] && !(typeof data['module_id'] === 'string' || data['module_id'] instanceof String)) {
            throw new Error("Expected the field `module_id` to be a primitive type in the JSON string but got " + data['module_id']);
        }

        return true;
    }


}

File.RequiredProperties = ["report_id", "content_id", "uploader_id", "module_id"];

/**
 * @member {String} id
 */
File.prototype['id'] = undefined;

/**
 * @member {String} report_id
 */
File.prototype['report_id'] = undefined;

/**
 * @member {String} content_id
 */
File.prototype['content_id'] = undefined;

/**
 * @member {String} file_path
 */
File.prototype['file_path'] = undefined;

/**
 * @member {String} file_type
 */
File.prototype['file_type'] = undefined;

/**
 * @member {Number} file_size
 */
File.prototype['file_size'] = undefined;

/**
 * @member {String} blur_hash
 */
File.prototype['blur_hash'] = undefined;

/**
 * @member {String} uploader_id
 */
File.prototype['uploader_id'] = undefined;

/**
 * @member {Boolean} in_s3
 * @default false
 */
File.prototype['in_s3'] = false;

/**
 * @member {String} secret
 */
File.prototype['secret'] = undefined;

/**
 * @member {Date} uploaded_at
 */
File.prototype['uploaded_at'] = undefined;

/**
 * @member {Date} removed_at
 */
File.prototype['removed_at'] = undefined;

/**
 * @member {String} module_id
 */
File.prototype['module_id'] = undefined;






export default File;

