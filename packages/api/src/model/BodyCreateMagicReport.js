/**
 * UGC Guard API
 * API for UGC Guard. A tool to help you manage reports on user generated content.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentCreate from './ContentCreate';
import MainContentSender from './MainContentSender';
import Person from './Person';
import ReportCreate from './ReportCreate';
import Reporter from './Reporter';

/**
 * The BodyCreateMagicReport model module.
 * @module model/BodyCreateMagicReport
 * @version 1.0.0
 */
class BodyCreateMagicReport {
    /**
     * Constructs a new <code>BodyCreateMagicReport</code>.
     * @alias module:model/BodyCreateMagicReport
     * @param report {module:model/ReportCreate} 
     * @param reporter {module:model/Reporter} 
     * @param mainContent {module:model/ContentCreate} 
     * @param mainContentSender {module:model/MainContentSender} 
     * @param reportContext {Array.<module:model/ContentCreate>} 
     * @param reportContextPersons {Array.<module:model/Person>} 
     */
    constructor(report, reporter, mainContent, mainContentSender, reportContext, reportContextPersons) { 
        
        BodyCreateMagicReport.initialize(this, report, reporter, mainContent, mainContentSender, reportContext, reportContextPersons);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, report, reporter, mainContent, mainContentSender, reportContext, reportContextPersons) { 
        obj['report'] = report;
        obj['reporter'] = reporter;
        obj['main_content'] = mainContent;
        obj['main_content_sender'] = mainContentSender;
        obj['report_context'] = reportContext;
        obj['report_context_persons'] = reportContextPersons;
    }

    /**
     * Constructs a <code>BodyCreateMagicReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BodyCreateMagicReport} obj Optional instance to populate.
     * @return {module:model/BodyCreateMagicReport} The populated <code>BodyCreateMagicReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BodyCreateMagicReport();

            if (data.hasOwnProperty('report')) {
                obj['report'] = ReportCreate.constructFromObject(data['report']);
            }
            if (data.hasOwnProperty('reporter')) {
                obj['reporter'] = Reporter.constructFromObject(data['reporter']);
            }
            if (data.hasOwnProperty('main_content')) {
                obj['main_content'] = ContentCreate.constructFromObject(data['main_content']);
            }
            if (data.hasOwnProperty('main_content_sender')) {
                obj['main_content_sender'] = MainContentSender.constructFromObject(data['main_content_sender']);
            }
            if (data.hasOwnProperty('report_context')) {
                obj['report_context'] = ApiClient.convertToType(data['report_context'], [ContentCreate]);
            }
            if (data.hasOwnProperty('report_context_persons')) {
                obj['report_context_persons'] = ApiClient.convertToType(data['report_context_persons'], [Person]);
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BodyCreateMagicReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BodyCreateMagicReport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BodyCreateMagicReport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `report`
        if (data['report']) { // data not null
          ReportCreate.validateJSON(data['report']);
        }
        // validate the optional field `reporter`
        if (data['reporter']) { // data not null
          Reporter.validateJSON(data['reporter']);
        }
        // validate the optional field `main_content`
        if (data['main_content']) { // data not null
          ContentCreate.validateJSON(data['main_content']);
        }
        // validate the optional field `main_content_sender`
        if (data['main_content_sender']) { // data not null
          MainContentSender.validateJSON(data['main_content_sender']);
        }
        if (data['report_context']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['report_context'])) {
                throw new Error("Expected the field `report_context` to be an array in the JSON data but got " + data['report_context']);
            }
            // validate the optional field `report_context` (array)
            for (const item of data['report_context']) {
                ContentCreate.validateJSON(item);
            };
        }
        if (data['report_context_persons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['report_context_persons'])) {
                throw new Error("Expected the field `report_context_persons` to be an array in the JSON data but got " + data['report_context_persons']);
            }
            // validate the optional field `report_context_persons` (array)
            for (const item of data['report_context_persons']) {
                Person.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['channels'])) {
            throw new Error("Expected the field `channels` to be an array in the JSON data but got " + data['channels']);
        }

        return true;
    }


}

BodyCreateMagicReport.RequiredProperties = ["report", "reporter", "main_content", "main_content_sender", "report_context", "report_context_persons"];

/**
 * @member {module:model/ReportCreate} report
 */
BodyCreateMagicReport.prototype['report'] = undefined;

/**
 * @member {module:model/Reporter} reporter
 */
BodyCreateMagicReport.prototype['reporter'] = undefined;

/**
 * @member {module:model/ContentCreate} main_content
 */
BodyCreateMagicReport.prototype['main_content'] = undefined;

/**
 * @member {module:model/MainContentSender} main_content_sender
 */
BodyCreateMagicReport.prototype['main_content_sender'] = undefined;

/**
 * @member {Array.<module:model/ContentCreate>} report_context
 */
BodyCreateMagicReport.prototype['report_context'] = undefined;

/**
 * @member {Array.<module:model/Person>} report_context_persons
 */
BodyCreateMagicReport.prototype['report_context_persons'] = undefined;

/**
 * @member {Array.<String>} channels
 */
BodyCreateMagicReport.prototype['channels'] = undefined;






export default BodyCreateMagicReport;

